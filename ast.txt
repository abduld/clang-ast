DeclGroup = Decl*
(FIXME: need to mention DeclGroupRef?)

TranslationUnitDecl = TranslationUnitDecl(Decl*)

DeclContext = BlockDecl
            | FunctionDecl
            | LinkageSpecDecl
            | NamespaceDecl
            | ObjCMethodDecl
            | ObjCContainerDecl
            | TagDecl
            | TranslationUnitDecl

Decl = TranslationUnitDecl
     | NamedDecl
     | LinkageSpecDecl
     | ObjCPropertyImplDecl
     | FileScopeAsmDecl
     | AccessSpecDecl
     | FriendDecl
     | FriendTemplateDecl
     | StaticAssertDecl
     | BlockDecl
     | ClassScopeFunctionSpecializationDecl
     | ImportDecl

NamedDecl = NamespaceDecl
          | UsingDirectiveDecl
          | NamespaceAliasDecl
          | LabelDecl(Identifier)
          | TypeDecl
          | ValueDecl(FIXME: Identifier, Type)
          | TemplateDecl
          | UsingDecl
          | UsingShadowDecl
          | ObjCMethodDecl
          | ObjCContainerDecl
          | ObjCPropertyDecl
          | ObjCCompatibleAliasDecl

TypeDecl = TypedefNameDecl
         | UnresolvedUsingTypenameDecl
         | TagDecl
         | TemplateTypeParmDecl

TypedefNameDecl = TypedefDecl
                | TypeAliasDecl

TagDecl = EnumDecl
        | RecordDecl
        | CXXRecordDecl
        | ClassTemplateSpecializationDecl
        | ClassTemplatePartialSpecializationDecl

ValueDecl = EnumConstantDecl
          | UnresolvedUsingValueDecl
          | IndirectFieldDecl
          | DeclaratorDecl

DeclaratorDecl = FunctionDecl(DeclarationName, NestedNameSpecifier?, FunctionType, Stmt?)
               | CXXMethod
               | CXXConstructor
               | CXXDestructor
               | CXXConversion
               | FieldDecl
               | ObjCIvarDecl
               | ObjCAtDefsFieldDecl
               | VarDecl(Identifier, NestedNameSpecifier?, Type, Expr?)
               | ImplicitParamDecl
               | ParmVarDecl
               | NonTypeTemplateParmDecl

TemplateDecl = RedeclarableTemplateDecl
             | TemplateTemplateParmDecl

RedeclarableTemplateDecl = FunctionTemplateDecl
                         | ClassTemplateDecl
                         | TypeAliasTemplateDecl

ObjCContainerDecl = ObjCCategory
                  | ObjCProtocol
                  | ObjCInterface
                  | ObjCImpl

ObjCImpl = ObjCCategoryImpl | ObjCImplementation

Stmt = Expr
     | NullStmt()
     | CompoundStmt(Stmt*)
     | LabelStmt(Identifier label, Stmt)
     | AttributedStmt(Attr*, Stmt)
     | IfStmt(VarDecl? var, Expr cond, Stmt then, Stmt? else)
     | SwitchStmt(VarDecl? var, Expr cond, SwitchCase* switchcaselist)
     | WhileStmt(VarDecl? var, Expr cond, Stmt body)
     | DoStmt(Stmt body, Expr cond)
     | ForStmt(Stmt? init, VarDecl? condvar, Expr? cond, Expr? inc, Stmt body)
     | GotoStmt(Identifier label)
     | IndirectGotoStmt(Expr)
     | ContinueStmt()
     | BreakStmt()
     | ReturnStmt()
     | ReturnStmt(Expr)
     | DeclStmt(Decl*)
     | SwitchCase // FIXME: can only appear in SwitchStmt?

     // GNU Extensions
     | AsmStmt

     // MS Extensions
     | MSAsmStmt

     // Obj-C statements
     | ObjCAtTryStmt
     | ObjCAtCatchStmt
     | ObjCAtFinallyStmt
     | ObjCAtThrowStmt
     | ObjCAtSynchronizedStmt
     | ObjCForCollectionStmt
     | ObjCAutoreleasePoolStmt

     // C++ statments
     | CXXCatchStmt
     | CXXTryStmt
     | CXXForRangeStmt

SwitchCase = CaseStmt(Expr lhs, Expr rhs)
           | DefaultStmt(Stmt)

Expr = PredefinedExpr
     | DeclRefExpr
     | IntegerLiteral(APInt val)
     | FloatingLiteral
     | ImaginaryLiteral
     | StringLiteral
     | CharacterLiteral
     | ParenExpr
     | UnaryOperator
     | OffsetOfExpr
     | UnaryExprOrTypeTraitExpr
     | ArraySubscriptExpr
     | CallExpr
     | MemberExpr
     | CastExpr
     | BinaryOperator
     | CompoundAssignOperator
     | AbstractConditionalOperator
     | ConditionalOperator
     | BinaryConditionalOperator
     | ImplicitCastExpr
     | ExplicitCastExpr
     | CStyleCastExpr
     | CompoundLiteralExpr
     | ExtVectorElementExpr
     | InitListExpr
     | DesignatedInitExpr
     | ImplicitValueInitExpr
     | ParenListExpr
     | VAArgExpr
     | GenericSelectionExpr
     | PseudoObjectExpr
     | AtomicExpr

     // GNU Extensions.
     | AddrLabelExpr
     | StmtExpr
     | ChooseExpr
     | GNUNullExpr

     // C++ Expressions.
     | CXXOperatorCallExpr
     | CXXMemberCallExpr
     | CXXNamedCastExpr
     | CXXStaticCastExpr
     | CXXDynamicCastExpr
     | CXXReinterpretCastExpr
     | CXXConstCastExpr
     | CXXFunctionalCastExpr
     | CXXTypeidExpr
     | UserDefinedLiteral
     | CXXBoolLiteralExpr(bool val)
     | CXXNullPtrLiteralExpr
     | CXXThisExpr
     | CXXThrowExpr
     | CXXDefaultArgExpr
     | CXXScalarValueInitExpr
     | CXXNewExpr
     | CXXDeleteExpr
     | CXXPseudoDestructorExpr
     | TypeTraitExpr
     | UnaryTypeTraitExpr
     | BinaryTypeTraitExpr
     | ArrayTypeTraitExpr
     | ExpressionTraitExpr
     | DependentScopeDeclRefExpr
     | CXXConstructExpr
     | CXXBindTemporaryExpr
     | ExprWithCleanups
     | CXXTemporaryObjectExpr
     | CXXUnresolvedConstructExpr
     | CXXDependentScopeMemberExpr
     | OverloadExpr
     | UnresolvedLookupExpr
     | UnresolvedMemberExpr
     | CXXNoexceptExpr
     | PackExpansionExpr
     | SizeOfPackExpr
     | SubstNonTypeTemplateParmExpr
     | SubstNonTypeTemplateParmPackExpr
     | MaterializeTemporaryExpr
     | LambdaExpr

     // Obj-C Expressions.
     | ObjCStringLiteral
     | ObjCBoxedExpr
     | ObjCArrayLiteral
     | ObjCDictionaryLiteral
     | ObjCEncodeExpr
     | ObjCMessageExpr
     | ObjCSelectorExpr
     | ObjCProtocolExpr
     | ObjCIvarRefExpr
     | ObjCPropertyRefExpr
     | ObjCIsaExpr
     | ObjCIndirectCopyRestoreExpr
     | ObjCBoolLiteralExpr
     | ObjCSubscriptRefExpr

     // Obj-C ARC Expressions.
     | ObjCBridgedCastExpr

     // CUDA Expressions.
     | CUDAKernelCallExpr

     // Clang Extensions.
     | ShuffleVectorExpr
     | BlockExpr
     | OpaqueValueExpr

     // Microsoft Extensions.
     | CXXUuidofExpr
     | SEHTryStmt
     | SEHExceptStmt
     | SEHFinallyStmt
     | MSDependentExistsStmt

     // OpenCL Extensions.
     | AsTypeExpr

Type = BuiltinType()
     | FunctionType
     | lots

FunctionType = FunctionNoProtoType(Type result)
             | FunctionProtoType(Type result, ParmVarDecl* arg)

TypeLoc = ?

Attr = lots

Notes:
- The structure defined by this grammar is a superset of legal ASTs.
- Nodes can have additional properties beyond those listed. Only
the properties that occur elsewhere in the grammar are listed.
- Many nodes have one or more SourceLocation.
- Decls have a DeclContext and Attr*.
- LabelStmt and GotoStmt actually reference a LabelDecl, not an Identifier.
In the case of a GNU local label, this LabelDecl occurs elsewhere in the tree.
- There are inheritance relationships between some node types that are not
expressed in this grammar.
